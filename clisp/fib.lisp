(declaim (optimize (speed 3) (safety 0)))

(declaim (inline fib))
(defun fib ()
  (let ((iter 0) (test 0))
    (declare ((unsigned-byte 32) iter)
             (fixnum test))
    (dotimes (n 1000000000)
      (declare ((unsigned-byte 32) n))
      (let ((prev 0) (curr 1))
        (declare (type (unsigned-byte 32) prev curr))
        (loop :while (< prev 999999999) :do
              (setf iter (the (unsigned-byte 32) (+ iter 1)))
              (if (evenp iter)
                (setf test (+ test prev))
                (setf test (- test prev)))
              (setf curr (+ curr prev))
              (setf prev (- curr prev)))))
    (list iter test)))

(declaim (inline fib))
(defun fib-rec ()
  (labels ((aux (n iter test prev curr)
  	      (declare ((unsigned-byte 32) n)
  	      	       ((unsigned-byte 32) iter)
  	      	       (fixnum test)
  	      	       ((unsigned-byte 32) prev)
  	      	       ((unsigned-byte 32) curr))
              (if (< n 1000000000)
                (if (> prev 999999999)
                  (aux (+ n 1) iter test 0 1)
                  (aux n (+ iter 1) (if (evenp iter)
                                      (+ test prev)
                                      (- test prev))
                       curr (+ prev curr)))
              (list iter test))))
    (aux 0 0 0 0 1)))

(defun main ()
    (print (fib-rec)))
